{
    "collab_server" : "",
    "contents" : "############### Preprocessing ################\n\n# Open data.csv\nraw_data <- read.csv(\"Data.csv\")\n\n# Discard \"adj.close\" --> Only selects those relevant columns\ndata <- raw_data[, c(\"Open\", \"High\", \"Low\", \"Close\", \"Volume\")]\n\n# Dicard row where Volume is NA\ndata <- data[complete.cases(data[,c(\"Volume\")]),]\ndata_len <- nrow(data)\n\nnext_non_na <- function(data, col, min_idx) {\n  stopifnot(is.data.frame(data))\n  stopifnot(is.numeric(min_idx))\n  \n  i = min_idx\n  data_len <- nrow(data)\n  while (i < data_len + 1) {\n    if (!is.na(data[i, col])) {\n      return(i)\n    }\n    i <- i + 1\n  }\n  return(-1) # not found\n}\n\n# Handle missing data\nfor (col in names(data)) {\n  # find first non-NA row\n  first_idx = next_non_na(data, col, 1)\n  if (first_idx > 1) {\n    # fill index 1 .. (first_idx - 1) with data[first_idx]\n    for (i in 1:(first_idx)) {\n      data[i, col] <- data[first_idx, col]\n    }\n  }\n  left = first_idx + 1\n  right = first_idx + 1\n  max_idx = first_idx\n  \n  # middle\n  while (left < data_len + 1 && right > 0) {\n    \n    left = next_non_na(data, col, right)\n    right = next_non_na(data, col, left + 1)\n    if (right > left + 1) {\n      # fill index (left + 1) .. (right - 1) with mean\n      mean_val <- mean(c(data[left, col], data[right, col]))\n      for (i in (left + 1):(right - 1)) {\n        data[i, col] <- mean_val\n      }\n    }\n    max_idx <- max(max_idx, right)\n  }\n  \n  # fill in last data\n  if (max_idx < data_len) {\n    for (i in (max_idx + 1):(data_len)) {\n      data[i, col] <- data[max_idx, col]\n    }\n  }\n  \n}\n\n# Difference data\ndiff_data <- data[-data_len,] # take all rows except the final row\n\nfor (col in names(data)) {\n  for (i in 1:(data_len - 1)) {\n    diff_data[i, col] <- data[i, col] / data[i + 1, col]\n  }\n}\n\n# Categorial data\ncat_data <- diff_data\ncats <- c(\"SU\", \"UP\", \"NC\", \"DN\", \"SD\")\nget_cat <- function(value, threshold1, threshold2) {\n  stopifnot(all(is.numeric(value), is.numeric(threshold1), is.numeric(threshold2), threshold1 > threshold2))\n  if (value > (1. + threshold1)) {\n    return(cats[1])\n  } else if (value > (1. + threshold2)) {\n    return(cats[2])\n  } else if (value > (1. - threshold2)) {\n    return(cats[3])\n  } else if (value > (1. - threshold1)) {\n    return(cats[4])\n  }\n  return(cats[5])\n}\n\nfor (col in c(\"Open\", \"High\", \"Low\", \"Close\")) {\n  for (i in 1:(data_len - 1)) {\n    cat_data[i, col] <- get_cat(diff_data[i, col], 0.015, 0.005)\n  }\n}\n\n# Volume\ncol = \"Volume\"\nfor (i in 1:(data_len - 1)) {\n  cat_data[i, col] <- get_cat(diff_data[i, col], 0.15, 0.05)\n}\n\n# Make values as factor instead of characters\ncat_data[,] <- lapply(cat_data[,], as.factor)\n\n\n\n####### Grow Decision Tree ###########\n# Target: Close\n# Features: Open, High, Low, Volume\n# Reading: http://scg.sdsu.edu/ctrees_r/ \nrequire('tree')\ncustom_control = tree.control(nrow(cat_data), mincut = 5, minsize = 10, mindev = 0.01)\ntr <- tree(Close ~ Open + High + Low + Volume, data=cat_data, split=\"gini\", control= custom_control)\nplot(tr); text(tr);\nsummary(tr);\n\ncv.tree(tr, method=\"misclass\");\n\npr <- prune.misclass(tr);\n\ntr2 <- prune.misclass(tr, k = 0.25);\n\nplot(tr2); text(tr2);\nsummary(tr2);\n\nfpreds = predict(tr, newdata=cat_data, type=\"class\")\nftable = table(actual=cat_data$Close, fpreds)\nftable\n\n# \n# # Load library for decision tree\n# require('rpart')\n# require('rpart.plot') # for plotting the decision tree\n# \n# # Parameters, TODO: TWEAK THIS\n# custom_control = rpart.control(minsplit = 16, minbucket=8, cp = 0.005, maxdepth = 30)\n# \n# \n# # Construct tree\n# fit <- rpart(Close ~ Open + High + Low + Volume, data=cat_data, method=\"class\", control=custom_control)\n# \n# printcp(fit) # display the results\n# plotcp(fit) # visualize cross-validation results\n# summary(fit) # detailed summary of splits\n# \n# # Confusion matrix\n# fpreds = predict(fit, newdata=cat_data, type=\"class\")\n# ftable = table(actual=cat_data$Close, fpreds)\n# ftable\n# \n# # plot tree\n# prp(fit, type=3, extra=102)\n# \n# \n# \n# \n# # Prune tree, TODO: TWEAK THIS TOO\n# fit2 <- prune(fit, cp = 0.03)\n# \n# # plot tree\n# prp(fit2, type=3, extra=102)\n# \n# printcp(fit2) # display the results\n# plotcp(fit2) # visualize cross-validation results\n# summary(fit2) # detailed summary of splits\n# \n# # Confusion matrix\n# fpreds = predict(fit2, newdata=cat_data, type=\"class\")\n# ftable = table(actual=cat_data$Close, fpreds)\n# ftable\n",
    "created" : 1476106491754.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "662080427",
    "id" : "ABDB082B",
    "lastKnownWriteTime" : 1476771341,
    "last_content_update" : 1476771375751,
    "path" : "D:/Cloud/GitHub/LearnR/As2/script.R",
    "project_path" : "script.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}